{"version":3,"sources":["../src/attachmentsAsUint8Arrays.js"],"names":["identity","blobToUint8Array","reader","FileReader","onload","resolve","Uint8Array","result","readAsArrayBuffer","blob","global","Buffer","attachments","name","data","attachmentsAsUint8Arrays"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,iBAArB;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,SACvB,aAAY,mBAAW;AACrB,QAAMC,SAAS,IAAIC,UAAJ,EAAf;;AACAD,WAAOE,MAAP,GAAgB;AAAA,aAAMC,QAAQ,IAAIC,UAAJ,CAAeJ,OAAOK,MAAtB,CAAR,CAAN;AAAA,KAAhB;;AACAL,WAAOM,iBAAP,CAAyBC,IAAzB;AACD,GAJD,CADuB;AAAA,CAAzB;;AAOA,eAAgB,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IAA8BA,OAAOC,MAArC,GACZX,QADY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEZ,iBAAwCY,WAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQL,kBADR,GACiB,EADjB;AAAA,mBAEiC,gBAAeK,WAAf,CAFjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEcC,gBAFd;AAEsBC,gBAFtB,YAEsBA,IAFtB;AAAA;AAAA,mBAGyBb,iBAAiBa,IAAjB,CAHzB;;AAAA;AAGIP,mBAAOM,IAAP,CAHJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAKSN,MALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFY;;AAAA,kBAEGQ,wBAFH;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import identity from 'lodash/identity';\n\nconst blobToUint8Array = blob =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(new Uint8Array(reader.result));\n    reader.readAsArrayBuffer(blob);\n  });\n\nexport default (typeof global === 'object' && global.Buffer\n  ? identity\n  : async function attachmentsAsUint8Arrays(attachments) {\n      const result = {};\n      for (const [name, { data }] of Object.entries(attachments)) {\n        result[name] = await blobToUint8Array(data);\n      }\n      return result;\n    });\n"],"file":"attachmentsAsUint8Arrays.js"}