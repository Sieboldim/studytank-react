import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _getIterator from "@babel/runtime/core-js/get-iterator";
import _Object$entries from "@babel/runtime/core-js/object/entries";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _Object$keys from "@babel/runtime/core-js/object/keys";
import _typeof from "@babel/runtime/helpers/typeof";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _Object$getPrototypeOf from "@babel/runtime/core-js/object/get-prototype-of";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import PouchDB from "pouchdb-node";
import find from 'pouchdb-find';
import { collate } from 'pouchdb-collate';
import { matchesSelector } from 'pouchdb-selector-core';
import { forbidExtraProps } from 'airbnb-prop-types';
import { number, object, array } from 'prop-types';
import BaseComponent from './BaseComponent';
import changesCache from './changesCache';
import renderProps from './renderProps';
import withDB from './withDB';
PouchDB.plugin(find);

var Find =
/*#__PURE__*/
function (_BaseComponent) {
  _inherits(Find, _BaseComponent);

  function Find() {
    var _ref;

    var _temp, _this;

    _classCallCheck(this, Find);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = Find.__proto__ || _Object$getPrototypeOf(Find)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: {
        docs: []
      }
    }), _temp));
  }

  _createClass(Find, [{
    key: "listen",
    value: function () {
      var _listen = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee2(options) {
        var _this2 = this;

        var db, selector, limit, skip, sort, _ref2, docs;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                db = this.props.db;
                selector = options.selector, limit = options.limit, skip = options.skip, sort = options.sort;

                if (!selector) {
                  _context2.next = 11;
                  break;
                }

                if (!sort) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 6;
                return db.createIndex({
                  index: {
                    fields: sort.map(function (field) {
                      return _typeof(field) === 'object' ? _Object$keys(field)[0] : field;
                    })
                  }
                });

              case 6:
                _context2.next = 8;
                return db.find(options);

              case 8:
                _ref2 = _context2.sent;
                docs = _ref2.docs;

                if (this.setStateIfMounted({
                  docs: docs
                })) {
                  // To find deleted and other non-matching documents, listen all changes
                  // and use selector in 'change' event.
                  this.cancel = changesCache.call(db, {
                    live: true,
                    include_docs: true,
                    since: 'now',
                    // Documents are kept in memory. 'complete' event can return an
                    // empty array.
                    return_docs: false
                  },
                  /*#__PURE__*/
                  function () {
                    var _ref4 = _asyncToGenerator(
                    /*#__PURE__*/
                    _regeneratorRuntime.mark(function _callee(_ref3) {
                      var deleted, doc, docs, index, found, length, _ref6, _ref6$docs, replacementDoc, sortOrders, sortedIndex, _ref11, _ref11$docs, lastDoc, _ref12, _ref12$docs, firstDoc;

                      return _regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              deleted = _ref3.deleted, doc = _ref3.doc;
                              docs = _toConsumableArray(_this2.state.docs);
                              index = docs.findIndex(function (_ref5) {
                                var _id = _ref5._id;
                                return doc._id === _id;
                              });
                              found = index !== -1; // Document was deleted or it does not match the selector?

                              if (!(deleted || selector && !matchesSelector(doc, selector))) {
                                _context.next = 18;
                                break;
                              }

                              if (!found) {
                                _context.next = 16;
                                break;
                              }

                              // Remove.
                              docs.splice(index, 1);
                              length = docs.length; // At the limit?

                              if (!(length + 1 === limit)) {
                                _context.next = 15;
                                break;
                              }

                              _context.next = 11;
                              return db.find(_objectSpread({}, options, {
                                limit: 1,
                                skip: (options.skip || 0) + length
                              }));

                            case 11:
                              _ref6 = _context.sent;
                              _ref6$docs = _slicedToArray(_ref6.docs, 1);
                              replacementDoc = _ref6$docs[0];

                              if (replacementDoc) {
                                docs.push(replacementDoc);
                              }

                            case 15:
                              _this2.setStateIfMounted({
                                docs: docs
                              });

                            case 16:
                              _context.next = 37;
                              break;

                            case 18:
                              if (found) {
                                // Update.
                                docs[index] = doc;
                              } else {
                                // Create.
                                docs.push(doc);
                              }

                              if (sort) {
                                sortOrders = sort.map(function (prop) {
                                  return _typeof(prop) === 'object' ? _Object$entries(prop)[0] : // Default sort order is 'asc'
                                  [prop, 'asc'];
                                });
                                docs.sort(function (a, b) {
                                  var _iteratorNormalCompletion = true;
                                  var _didIteratorError = false;
                                  var _iteratorError = undefined;

                                  try {
                                    for (var _iterator = _getIterator(sortOrders), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                      var _ref9 = _step.value;

                                      var _ref8 = _slicedToArray(_ref9, 2);

                                      var _prop = _ref8[0];
                                      var _order = _ref8[1];
                                      var result = collate(a[_prop], b[_prop]);

                                      if (result !== 0) {
                                        return _order === 'asc' ? result : -result;
                                      }
                                    }
                                  } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                  } finally {
                                    try {
                                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                      }
                                    } finally {
                                      if (_didIteratorError) {
                                        throw _iteratorError;
                                      }
                                    }
                                  }

                                  return 0;
                                });
                              }

                              sortedIndex = docs.findIndex(function (_ref10) {
                                var _id = _ref10._id;
                                return doc._id === _id;
                              }); // Document update, new place supposed to be last, `limit` option
                              // is set and limit was reached?

                              if (!(found && sortedIndex + 1 === limit)) {
                                _context.next = 28;
                                break;
                              }

                              _context.next = 24;
                              return db.find(_objectSpread({}, options, {
                                limit: 1,
                                skip: (options.skip || 0) + sortedIndex
                              }));

                            case 24:
                              _ref11 = _context.sent;
                              _ref11$docs = _slicedToArray(_ref11.docs, 1);
                              lastDoc = _ref11$docs[0];

                              if ((lastDoc === null || lastDoc === void 0 ? void 0 : lastDoc._id) !== doc._id) {
                                docs[sortedIndex] = lastDoc;
                              }

                            case 28:
                              if (!(skip && sortedIndex === 0)) {
                                _context.next = 35;
                                break;
                              }

                              _context.next = 31;
                              return db.find(_objectSpread({}, options, {
                                limit: 1
                              }));

                            case 31:
                              _ref12 = _context.sent;
                              _ref12$docs = _slicedToArray(_ref12.docs, 1);
                              firstDoc = _ref12$docs[0];

                              if ((firstDoc === null || firstDoc === void 0 ? void 0 : firstDoc._id) !== doc._id) {
                                docs[0] = firstDoc;
                              }

                            case 35:
                              if (docs.length > limit) {
                                docs.splice(limit);
                              }

                              _this2.setStateIfMounted({
                                docs: docs
                              });

                            case 37:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));

                    return function (_x2) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                }

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function listen(_x) {
        return _listen.apply(this, arguments);
      };
    }()
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          db = _props.db,
          otherProps = _objectWithoutProperties(_props, ["db"]),
          docs = this.state.docs;

      return renderProps(otherProps, docs, {
        db: db,
        docs: docs
      });
    }
  }]);

  return Find;
}(BaseComponent);

Object.defineProperty(Find, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: forbidExtraProps(_objectSpread({}, BaseComponent.propTypes, {
    limit: number,
    selector: object.isRequired,
    skip: number,
    sort: array
  }))
});
export default withDB(Find);
//# sourceMappingURL=Find.js.map