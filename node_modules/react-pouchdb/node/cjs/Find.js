"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _entries = _interopRequireDefault(require("@babel/runtime/core-js/object/entries"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _keys = _interopRequireDefault(require("@babel/runtime/core-js/object/keys"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _getPrototypeOf = _interopRequireDefault(require("@babel/runtime/core-js/object/get-prototype-of"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _pouchdbNode = _interopRequireDefault(require("pouchdb-node"));

var _pouchdbFind = _interopRequireDefault(require("pouchdb-find"));

var _pouchdbCollate = require("pouchdb-collate");

var _pouchdbSelectorCore = require("pouchdb-selector-core");

var _airbnbPropTypes = require("airbnb-prop-types");

var _propTypes = require("prop-types");

var _BaseComponent2 = _interopRequireDefault(require("./BaseComponent"));

var _changesCache = _interopRequireDefault(require("./changesCache"));

var _renderProps = _interopRequireDefault(require("./renderProps"));

var _withDB = _interopRequireDefault(require("./withDB"));

_pouchdbNode.default.plugin(_pouchdbFind.default);

var Find =
/*#__PURE__*/
function (_BaseComponent) {
  (0, _inherits2.default)(Find, _BaseComponent);

  function Find() {
    var _ref;

    var _temp, _this;

    (0, _classCallCheck2.default)(this, Find);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = Find.__proto__ || (0, _getPrototypeOf.default)(Find)).call.apply(_ref, [this].concat(args))), Object.defineProperty((0, _assertThisInitialized2.default)(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: {
        docs: []
      }
    }), _temp));
  }

  (0, _createClass2.default)(Find, [{
    key: "listen",
    value: function () {
      var _listen = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(options) {
        var _this2 = this;

        var db, selector, limit, skip, sort, _ref2, docs;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                db = this.props.db;
                selector = options.selector, limit = options.limit, skip = options.skip, sort = options.sort;

                if (!selector) {
                  _context2.next = 11;
                  break;
                }

                if (!sort) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 6;
                return db.createIndex({
                  index: {
                    fields: sort.map(function (field) {
                      return (0, _typeof2.default)(field) === 'object' ? (0, _keys.default)(field)[0] : field;
                    })
                  }
                });

              case 6:
                _context2.next = 8;
                return db.find(options);

              case 8:
                _ref2 = _context2.sent;
                docs = _ref2.docs;

                if (this.setStateIfMounted({
                  docs: docs
                })) {
                  // To find deleted and other non-matching documents, listen all changes
                  // and use selector in 'change' event.
                  this.cancel = _changesCache.default.call(db, {
                    live: true,
                    include_docs: true,
                    since: 'now',
                    // Documents are kept in memory. 'complete' event can return an
                    // empty array.
                    return_docs: false
                  },
                  /*#__PURE__*/
                  function () {
                    var _ref4 = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee(_ref3) {
                      var deleted, doc, docs, index, found, length, _ref6, _ref6$docs, replacementDoc, sortOrders, sortedIndex, _ref11, _ref11$docs, lastDoc, _ref12, _ref12$docs, firstDoc;

                      return _regenerator.default.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              deleted = _ref3.deleted, doc = _ref3.doc;
                              docs = (0, _toConsumableArray2.default)(_this2.state.docs);
                              index = docs.findIndex(function (_ref5) {
                                var _id = _ref5._id;
                                return doc._id === _id;
                              });
                              found = index !== -1; // Document was deleted or it does not match the selector?

                              if (!(deleted || selector && !(0, _pouchdbSelectorCore.matchesSelector)(doc, selector))) {
                                _context.next = 18;
                                break;
                              }

                              if (!found) {
                                _context.next = 16;
                                break;
                              }

                              // Remove.
                              docs.splice(index, 1);
                              length = docs.length; // At the limit?

                              if (!(length + 1 === limit)) {
                                _context.next = 15;
                                break;
                              }

                              _context.next = 11;
                              return db.find((0, _objectSpread2.default)({}, options, {
                                limit: 1,
                                skip: (options.skip || 0) + length
                              }));

                            case 11:
                              _ref6 = _context.sent;
                              _ref6$docs = (0, _slicedToArray2.default)(_ref6.docs, 1);
                              replacementDoc = _ref6$docs[0];

                              if (replacementDoc) {
                                docs.push(replacementDoc);
                              }

                            case 15:
                              _this2.setStateIfMounted({
                                docs: docs
                              });

                            case 16:
                              _context.next = 37;
                              break;

                            case 18:
                              if (found) {
                                // Update.
                                docs[index] = doc;
                              } else {
                                // Create.
                                docs.push(doc);
                              }

                              if (sort) {
                                sortOrders = sort.map(function (prop) {
                                  return (0, _typeof2.default)(prop) === 'object' ? (0, _entries.default)(prop)[0] : // Default sort order is 'asc'
                                  [prop, 'asc'];
                                });
                                docs.sort(function (a, b) {
                                  var _iteratorNormalCompletion = true;
                                  var _didIteratorError = false;
                                  var _iteratorError = undefined;

                                  try {
                                    for (var _iterator = (0, _getIterator2.default)(sortOrders), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                      var _ref9 = _step.value;

                                      var _ref8 = (0, _slicedToArray2.default)(_ref9, 2);

                                      var _prop = _ref8[0];
                                      var _order = _ref8[1];
                                      var result = (0, _pouchdbCollate.collate)(a[_prop], b[_prop]);

                                      if (result !== 0) {
                                        return _order === 'asc' ? result : -result;
                                      }
                                    }
                                  } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                  } finally {
                                    try {
                                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                      }
                                    } finally {
                                      if (_didIteratorError) {
                                        throw _iteratorError;
                                      }
                                    }
                                  }

                                  return 0;
                                });
                              }

                              sortedIndex = docs.findIndex(function (_ref10) {
                                var _id = _ref10._id;
                                return doc._id === _id;
                              }); // Document update, new place supposed to be last, `limit` option
                              // is set and limit was reached?

                              if (!(found && sortedIndex + 1 === limit)) {
                                _context.next = 28;
                                break;
                              }

                              _context.next = 24;
                              return db.find((0, _objectSpread2.default)({}, options, {
                                limit: 1,
                                skip: (options.skip || 0) + sortedIndex
                              }));

                            case 24:
                              _ref11 = _context.sent;
                              _ref11$docs = (0, _slicedToArray2.default)(_ref11.docs, 1);
                              lastDoc = _ref11$docs[0];

                              if ((lastDoc === null || lastDoc === void 0 ? void 0 : lastDoc._id) !== doc._id) {
                                docs[sortedIndex] = lastDoc;
                              }

                            case 28:
                              if (!(skip && sortedIndex === 0)) {
                                _context.next = 35;
                                break;
                              }

                              _context.next = 31;
                              return db.find((0, _objectSpread2.default)({}, options, {
                                limit: 1
                              }));

                            case 31:
                              _ref12 = _context.sent;
                              _ref12$docs = (0, _slicedToArray2.default)(_ref12.docs, 1);
                              firstDoc = _ref12$docs[0];

                              if ((firstDoc === null || firstDoc === void 0 ? void 0 : firstDoc._id) !== doc._id) {
                                docs[0] = firstDoc;
                              }

                            case 35:
                              if (docs.length > limit) {
                                docs.splice(limit);
                              }

                              _this2.setStateIfMounted({
                                docs: docs
                              });

                            case 37:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));

                    return function (_x2) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                }

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function listen(_x) {
        return _listen.apply(this, arguments);
      };
    }()
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          db = _props.db,
          otherProps = (0, _objectWithoutProperties2.default)(_props, ["db"]),
          docs = this.state.docs;
      return (0, _renderProps.default)(otherProps, docs, {
        db: db,
        docs: docs
      });
    }
  }]);
  return Find;
}(_BaseComponent2.default);

Object.defineProperty(Find, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: (0, _airbnbPropTypes.forbidExtraProps)((0, _objectSpread2.default)({}, _BaseComponent2.default.propTypes, {
    limit: _propTypes.number,
    selector: _propTypes.object.isRequired,
    skip: _propTypes.number,
    sort: _propTypes.array
  }))
});

var _default = (0, _withDB.default)(Find);

exports.default = _default;
//# sourceMappingURL=Find.js.map