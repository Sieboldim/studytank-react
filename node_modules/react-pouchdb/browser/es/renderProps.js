import _Object$keys from "@babel/runtime/core-js/object/keys";
import { Children, cloneElement, createElement } from 'react';
import { func, element, oneOfType } from 'prop-types';
import lodashOmit from 'lodash/omit';
export var propTypes = {
  children: oneOfType([element, func]),
  component: func,
  render: func
};

var propNames = _Object$keys(propTypes);

export default (function (_ref, ready, props) {
  var children = _ref.children,
      component = _ref.component,
      render = _ref.render;

  if (component) {
    return ready ? createElement(component, props) : null;
  }

  if (render) {
    return ready ? render(props) : null;
  }

  if (typeof children === 'function') {
    return children.prototype.render ? createElement(children, props) : children(props);
  }

  if (children && Children.count(children)) {
    return cloneElement(children, props);
  }
});
export var omit = function omit(props) {
  return lodashOmit(props, propNames);
};
//# sourceMappingURL=renderProps.js.map