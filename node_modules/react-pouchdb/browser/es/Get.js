import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Object$keys from "@babel/runtime/core-js/object/keys";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _Object$getPrototypeOf from "@babel/runtime/core-js/object/get-prototype-of";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import { bool, oneOf, string } from 'prop-types';
import BaseComponent from './BaseComponent';
import attachmentsAsUint8Arrays from './attachmentsAsUint8Arrays';
import changesCache from './changesCache';
import renderProps from './renderProps';
import withDB from './withDB';
var UINT8ARRAY = 'u8a';
var ALLOWED_LIVE_OPTIONS = ['attachments', 'ajax', 'binary', 'id'];

var Get =
/*#__PURE__*/
function (_BaseComponent) {
  _inherits(Get, _BaseComponent);

  function Get() {
    var _ref;

    var _temp, _this;

    _classCallCheck(this, Get);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = Get.__proto__ || _Object$getPrototypeOf(Get)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: {}
    }), _temp));
  }

  _createClass(Get, [{
    key: "listen",
    value: function () {
      var _listen = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee2(options) {
        var _this2 = this;

        var db, id, attachments, otherOptions, optionsWithAttachmentAndBinaryOption;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                db = this.props.db;
                id = options.id, attachments = options.attachments, otherOptions = _objectWithoutProperties(options, ["id", "attachments"]);
                optionsWithAttachmentAndBinaryOption = _objectSpread({
                  binary: attachments === UINT8ARRAY
                }, otherOptions, {
                  attachments: !!attachments
                });
                _context2.t0 = this;
                _context2.next = 6;
                return this.get(id, optionsWithAttachmentAndBinaryOption);

              case 6:
                _context2.t1 = _context2.sent;

                if (!_context2.t0.setStateIfMounted.call(_context2.t0, _context2.t1)) {
                  _context2.next = 9;
                  break;
                }

                // Live?
                if (_Object$keys(options).every(function (option) {
                  return ALLOWED_LIVE_OPTIONS.includes(option);
                })) {
                  this.cancel = changesCache.call(db, _objectSpread({}, optionsWithAttachmentAndBinaryOption, {
                    live: true,
                    include_docs: true,
                    since: 'now',
                    doc_ids: [id]
                  }),
                  /*#__PURE__*/
                  function () {
                    var _ref3 = _asyncToGenerator(
                    /*#__PURE__*/
                    _regeneratorRuntime.mark(function _callee(_ref2) {
                      var doc;
                      return _regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              doc = _ref2.doc;
                              _context.t0 = _this2;
                              _context.next = 4;
                              return _this2.nextState(doc);

                            case 4:
                              _context.t1 = _context.sent;
                              return _context.abrupt("return", _context.t0.setStateIfMounted.call(_context.t0, _context.t1));

                            case 6:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));

                    return function (_x2) {
                      return _ref3.apply(this, arguments);
                    };
                  }());
                }

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function listen(_x) {
        return _listen.apply(this, arguments);
      };
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee3(id, options) {
        var db;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                db = this.props.db;
                _context3.prev = 1;
                _context3.t0 = this;
                _context3.next = 5;
                return db.get(id, options);

              case 5:
                _context3.t1 = _context3.sent;
                _context3.next = 8;
                return _context3.t0.nextState.call(_context3.t0, _context3.t1);

              case 8:
                return _context3.abrupt("return", _context3.sent);

              case 11:
                _context3.prev = 11;
                _context3.t2 = _context3["catch"](1);
                return _context3.abrupt("return", {
                  exists: false
                });

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1, 11]]);
      }));

      return function get(_x3, _x4) {
        return _get.apply(this, arguments);
      };
    }()
  }, {
    key: "nextState",
    value: function () {
      var _nextState = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee4(doc) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.props.attachments === UINT8ARRAY)) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 3;
                return attachmentsAsUint8Arrays(doc._attachments);

              case 3:
                _context4.t0 = _context4.sent;
                _context4.next = 7;
                break;

              case 6:
                _context4.t0 = doc._attachments;

              case 7:
                _context4.t1 = _context4.t0;
                _context4.t2 = doc;
                _context4.t3 = !doc._deleted;
                return _context4.abrupt("return", {
                  attachments: _context4.t1,
                  doc: _context4.t2,
                  exists: _context4.t3
                });

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function nextState(_x5) {
        return _nextState.apply(this, arguments);
      };
    }()
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          db = _props.db,
          otherProps = _objectWithoutProperties(_props, ["db"]),
          state = this.state,
          exists = this.state.exists;

      return renderProps(otherProps, exists, _objectSpread({
        db: db
      }, state));
    }
  }]);

  return Get;
}(BaseComponent);

Object.defineProperty(Get, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: _objectSpread({}, BaseComponent.propTypes, {
    attachments: oneOf([true, false, UINT8ARRAY]),
    binary: bool,
    id: string.isRequired
  })
});
export default withDB(Get);
//# sourceMappingURL=Get.js.map